{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"const notice = (msg) => new Notice(msg, 5000); const log = (msg) => console.log(msg); const API_KEY_OPTION = \"OMDb API Key\"; const API_URL =...","date":"2023-01-23T09:28:57.302Z","updated":"2022-01-28T06:21:59.000Z","comments":true,"path":"api/pages/88-Template/script/movies.js","covers":null,"excerpt":"","content":"const notice = (msg) => new Notice(msg, 5000);\nconst log = (msg) => console.log(msg);\n\nconst API_KEY_OPTION = \"OMDb API Key\";\nconst API_URL = \"http://www.omdbapi.com/\";\n\nmodule.exports = {\n  entry: start,\n  settings: {\n    name: \"Movie Script\",\n    author: \"Christian B. B. Houmann\",\n    options: {\n      [API_KEY_OPTION]: {\n        type: \"text\",\n        defaultValue: \"\",\n        placeholder: \"OMDb API Key\",\n      },\n    },\n  },\n};\n\nlet QuickAdd;\nlet Settings;\n\nasync function start(params, settings) {\n  QuickAdd = params;\n  Settings = settings;\n\n  const query = await QuickAdd.quickAddApi.inputPrompt(\n    \"Enter movie title or IMDB ID: \"\n  );\n  if (!query) {\n    notice(\"No query entered.\");\n    throw new Error(\"No query entered.\");\n  }\n\n  let selectedShow;\n\n  if (isImdbId(query)) {\n    selectedShow = await getByImdbId(query);\n  } else {\n    const results = await getByQuery(query);\n\n    const choice = await QuickAdd.quickAddApi.suggester(\n      results.map(formatTitleForSuggestion),\n      results\n    );\n    if (!choice) {\n      notice(\"No choice selected.\");\n      throw new Error(\"No choice selected.\");\n    }\n\n    selectedShow = await getByImdbId(choice.imdbID);\n  }\n\n  QuickAdd.variables = {\n    ...selectedShow,\n    actorLinks: linkifyList(selectedShow.Actors.split(\",\")),\n    genreLinks: linkifyList(selectedShow.Genre.split(\",\")),\n    directorLink:\n      selectedShow.Director === \"N/A\" ? \" \" : `[[${selectedShow.Director}]]`,\n    fileName: replaceIllegalFileNameCharactersInString(selectedShow.Title),\n    typeLink: `[[${selectedShow.Type === \"movie\" ? \"Movies\" : \"Series\"}]]`,\n  };\n}\n\nfunction isImdbId(str) {\n  return /^tt\\d+$/.test(str);\n}\n\nfunction formatTitleForSuggestion(resultItem) {\n  return `(${resultItem.Type === \"movie\" ? \"M\" : \"TV\"}) ${resultItem.Title} (${\n    resultItem.Year\n  })`;\n}\n\nasync function getByQuery(query) {\n  const searchResults = await apiGet(API_URL, {\n    s: query,\n  });\n\n  if (!searchResults.Search || !searchResults.Search.length) {\n    notice(\"No results found.\");\n    throw new Error(\"No results found.\");\n  }\n\n  return searchResults.Search;\n}\n\nasync function getByImdbId(id) {\n  const res = await apiGet(API_URL, {\n    i: id,\n  });\n\n  if (!res) {\n    notice(\"No results found.\");\n    throw new Error(\"No results found.\");\n  }\n\n  return res;\n}\n\nfunction linkifyList(list) {\n  if (list.length === 0) return \"\";\n  if (list.length === 1) return `[[${list[0]}]]`;\n\n  return list.map((item) => `[[${item.trim()}]]`).join(\", \");\n}\n\nfunction replaceIllegalFileNameCharactersInString(string) {\n  return string.replace(/[\\\\,#%&\\{\\}\\/*<>?$\\'\\\":@]*/g, \"\");\n}\n\nasync function apiGet(url, data) {\n  let finalURL = new URL(url);\n  if (data)\n    Object.keys(data).forEach((key) =>\n      finalURL.searchParams.append(key, data[key])\n    );\n\n  finalURL.searchParams.append(\"apikey\", Settings[API_KEY_OPTION]);\n\n  const res = await request({\n    url: finalURL.href,\n    method: \"GET\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  return JSON.parse(res);\n}","count_time":{"symbolsCount":"3k","symbolsTime":"3 mins."},"toc":""}