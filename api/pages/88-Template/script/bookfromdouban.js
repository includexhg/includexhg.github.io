{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"//2022-01-28 by Cuman //脚本可以从获取网址信息，访问豆瓣图书网站抓取图书基本信息字段。 const notice = (msg) => new Notice(msg, 5000); const log = (msg) => console.log(msg)...","date":"2023-01-23T09:28:57.298Z","updated":"2022-12-08T02:28:53.253Z","comments":true,"path":"api/pages/88-Template/script/bookfromdouban.js","covers":null,"excerpt":"","content":"//2022-01-28 by Cuman\n//脚本可以从获取网址信息，访问豆瓣图书网站抓取图书基本信息字段。\n\nconst notice = (msg) => new Notice(msg, 5000);\nconst log = (msg) => console.log(msg);\n\nmodule.exports = bookfromdouban\n\nlet QuickAdd;\n\nasync function bookfromdouban(params) {\n  QuickAdd = params;\n  const isbn_reg = /^(?=(?:\\D*\\d){10}(?:(?:\\D*\\d){3})?$)[\\d-]+$/g;\n  const http_reg = /(http:\\/\\/|https:\\/\\/)((\\w|=|\\?|\\.|\\/|&|-)+)/g;\n  const http_reg_book = /(http:\\/\\/book|https:\\/\\/book|m)((\\w|=|\\?|\\.|\\/|&|-)+)/g;\n  let detailurl;\t\n  const query = await QuickAdd.quickAddApi.inputPrompt(\n    \"请输入豆瓣图书网址或者ISBN:\"\n  );\n\n\tif (!query) {\n    notice(\"No url entered.\");\n    throw new Error(\"No url entered.\");\n  }\n\tif (isbn_reg.exec(query)) {\n\t\tisbn = query.replace(/-/g, \"\");\n\t\tdetailurl= await getBookByisbn(isbn);\n\t}else\n\t{\t\n\t\t if (!http_reg.exec(query)) {\n\t\t new Notice('复制的内容需要包含网址或者ISBN码', 3000);\n\t\t throw new Error(\"No results found.\");\n\t}else\n\t\t{\n\t\tdetailurl = query.match(http_reg)[0];\n\t\t}\n\t}\nconsole.log('detailUrl:'+detailurl);\n if (http_reg_book.exec(detailurl)) {\n\tlet bookdata = await getbookByurl(detailurl);\n\tif(bookdata)\n\tnew Notice('图书数据获取成功！', 3000);\n  QuickAdd.variables = {\n    ...bookdata\n  };\n}else{\n new Notice('只能解析book.douban.com相关网址', 3000);\n throw new Error(\"No results found.\");\n}\n\n }\t \n \nfunction isNotEmptyStr(s) {\n\ts = s.trim();\t\n\tif (typeof s == 'string' && s.length > 0) {\n        return true\n\t}\n\treturn false\n}\nasync function getbookByurl(url) {\n\n let page = await urlGet(url);\n\n   if (!page) {\n    notice(\"No results found.\");\n    throw new Error(\"No results found.\");\n  }\n    let p = new DOMParser();\n    let doc = p.parseFromString(page, \"text/html\");\n    let $ = s => doc.querySelector(s);\n\tlet $2 = z => doc.querySelectorAll(z);\n    let author = '';\n    let bookname = '';\n    bookname = $(\"meta[property='og:title']\")?.content\n\n    //author = $(\"meta[property='book:author']\")?.content\n    // let intro_class_list = $2(\".intro\");\n    // let intro = '';\n    // if (intro_class_list) {\n        // intro = $(\"#link-report .intro\").innerText;\n        // let regx = /<[^>]*>|<\\/[^>]*>/gm;\n        // if (intro) {\n\t\t\t// intro = intro.replace('(展开全部)', \"\");\n            // intro = intro.replace(regx, \"\").trim();\n            // intro = intro.replace(/\\s\\s\\s\\s/gm, \"\\n\");\n\t\t\t// intro = intro.replace(/=*/gm, \"\");\n\t\t\t\n        // }\n\t// }\n\n\t//原文摘录和作者简介 from https://github.com/LumosLovegood/myScripts/blob/main/DoubanAllInOne/doubanInOne.js\n\tlet intro = '';\n    let authorintro = \" \";\n    var temp1 = $(\"h2\");\n    if(temp1.innerText.includes(\"内容简介\")){\n        var temp2 = temp1.nextElementSibling.querySelectorAll(\"div.intro\")\n        var temp3 = temp2[temp2.length-1].querySelectorAll(\"p\");\n        for(var i=0;i<temp3.length;i++){\n            intro = intro+temp3[i]?.textContent+\"\\n\";\n        }\n        try{\n            temp2 = $2(\"h2\")[1].nextElementSibling.querySelectorAll(\"div.intro\");\n            temp3 = temp2[temp2.length-1].querySelectorAll(\"p\");\n            for(var i=0;i<temp3.length;i++){\n                authorintro = authorintro+temp3[i]?.textContent+\"\\n\";\n            }\n        }catch(e){\n            new Notice(\"没有作者简介\");\n        }        \n    }else if(temp1.innerText.includes(\"作者简介\")){\n        var temp2 = temp1.nextElementSibling.querySelectorAll(\"div.intro\")\n        var temp3 = temp2[temp2.length-1].querySelectorAll(\"p\");\n        for(var i=0;i<temp3.length;i++){\n            authorintro = authorintro+temp3[i]?.textContent+\"\\n\";\n        }\n    }\n\t//\tconsole.log(authorintro,'11')\n    //原文摘录\n    let quote1 = \" \";\n    let quote2 = \" \";\n    let quoteList = $2(\"figure\");\n    let sourceList = $2(\"figcaption\");\n    if(quoteList.length!=0){\n        quote1 = quoteList[0]?.childNodes[0]?.textContent.replace(/(\\r\\n|\\n)[\\t\\s]*(\\r\\n|\\n)/g,\"\\n\").replace(/[ 　]+/g,\"\").replace(/\\(/g,\"\").trim()+\"\\n\"+sourceList[0]?.textContent.replace(/\\s/g,\"\").trim();\n\t\tif(quoteList[1])\n        quote2 = quoteList[1]?.childNodes[0]?.textContent.replace(/(\\r\\n|\\n)[\\t\\s]*(\\r\\n|\\n)/g,\"\\n\").replace(/[ 　]+/g,\"\").replace(/\\(/g,\"\").trim()+\"\\n\"+sourceList[1]?.textContent.replace(/\\s/g,\"\").trim();\n    }\n\t//console.log(quoteList,'22')\n\t/*******************************************/\n\tintro=isNotEmptyStr(intro)?intro.replace(/<[^>]*>|<\\/[^>]*>/gm, \"\").trim().replace(/\\s\\s\\s\\s/gm, \"\\n\").replace(/=*/gm, \"\"):' ';\n\tauthorintro=isNotEmptyStr(authorintro)?'> [!tip]- **作者简介**\\n>\\n'+authorintro:' ';\n\tquote1=isNotEmptyStr(quote1)?'> [!quote]- **原文摘录**\\n>\\n'+'>>'+quote1:' ';\n\tquote2=isNotEmptyStr(quote2)?'>\\n>> '+quote2:' ';\n\n\tlet bookinfo = {};\n\tlet regauthor= /作者:([\\s\\S]*)(?=出版社:)/g;\n\tlet regpagecount = /页数:.(\\d*)/g;\n\tlet regpublish = /出版社:\\W(.*)/g;\n\tlet regpublishyear = /出版年:\\W(.*)/g;\n\tlet str =$(\"#info\")?.innerText;\n\tauthor= regauthor.exec(str)\n\tauthor=(author==null)?'未知':author[1].trim().replace(/\\n|\\r/g,\"\").replace(/\\ +/g,\"\");\n\tlet pages=regpagecount.exec(str);\n\tbookinfo.pagecount=(pages==null)?'0':pages[1].trim();\n\tlet publish=regpublish.exec(str);\n\tbookinfo.publish=(publish==null)?'未知':publish[1].trim();\n\tlet publishyear=regpublishyear.exec(str);\n\tbookinfo.publishyear=(publishyear==null)?'未知':publishyear[1].trim();\n\t//bookinfo.publish=regpublish.exec(str)[1]?.trim()??'未知';\n\tbookinfo.bookname =bookname;\n\tbookinfo.filename =bookname.replace(/(^\\s*)|\\^|\\.|\\*|\\?|\\!|\\/|\\\\|\\$|\\#|\\&|\\||,|\\[|\\]|\\{|\\}|\\(|\\)|\\-|\\+|\\=|(\\s*$)/g, \"\").replace(/[\\\\\\\\/:*?\\\"<>|]/g,\"_\");\n\tbookinfo.cover = $(\"meta[property='og:image']\")?.content;\n\tbookinfo.type = 'book';\n\tbookinfo.description = $(\"meta[property='og:description']\")?.content;\n\tbookinfo.douban_url = $(\"meta[property='og:url']\")?.content;\n\tbookinfo.author = \"'\"+ author +\"'\";  \n\tbookinfo.isbn =  $(\"meta[property='book:isbn']\")?.content;\n\tbookinfo.rating = $(\"#interest_sectl > div > div.rating_self > strong\")?.textContent??'-';\n\tbookinfo.intro = intro;\n\tbookinfo.authorintro =authorintro;\n\tbookinfo.quote1=quote1;\n    bookinfo.quote2=quote2;\n   for(var i in bookinfo){\n        if(bookinfo[i]==\"\" || bookinfo[i]== null){\n            bookinfo[i]=\"未知\";\n        }\n    }\n  return bookinfo;\n}\n\n\nasync function getBookByisbn(isbn){\n    let isbnurl = \"https://m.douban.com/search/?query=\"+isbn;\n\tlet page = await urlGet(isbnurl);\n\n    if (!page) {\n    notice(\"No results found.\");\n    throw new Error(\"No results found.\");\n  }\n    let p = new DOMParser();\n    let doc = p.parseFromString(page, \"text/html\");\n\tlet $ = s => doc.querySelector(s);\n    let title = $(\"div.subject-info span\")?.textContent;\n    let detailUrl = String($(\"ul li a\").href).replace(\"app://obsidian.md\",\"https://m.douban.com\");\n    if (!detailUrl){\n        return null;\n    }\n    return detailUrl;\n}\n \nasync function urlGet(url) {\nconsole.log(url);\n  let finalURL = new URL(url);\n  const res = await request({\n    url: finalURL.href,\n    method: \"GET\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"text/html; charset=utf-8\",\n\t  'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/98.100.4758.11 Safari/537.36'\n    },\n  });\n  \n  return res;\n\n\n}\n","count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"toc":""}