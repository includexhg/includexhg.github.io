{"title":"","uid":"1cd19fc71517798e2fa5b7457d1fb06e","text":"//From https://github.com/702573N/Obsidian-Notes-List let {pages, view} = input; // Get Notes And Sort if (pages==\"\") { var notes = dv.pages...","date":"2023-01-23T09:28:57.303Z","updated":"2022-11-08T01:29:40.685Z","comments":true,"path":"api/pages/88-Template/script/notesList/view - 副本.js","covers":[],"excerpt":"","content":"//From https://github.com/702573N/Obsidian-Notes-List\nlet {pages, view} = input;\n\n// Get Notes And Sort\nif (pages==\"\") {\n\tvar notes = dv.pages();\n} else {\n\tif (pages.startsWith(\"dv.pages\")) {\n\t\tvar notes = eval(pages);\n\t} else {\n\t\tvar notes = dv.pages('\"'+pages+'\"');\n\t};\n};\n\n//var notes = pages ? dv.pages() : dv.pages('\"'+pages+'\"');\nnotes = notes.sort(n => n.file.mtime, \"desc\");\n\n// Set Variables\nvar imgExtensions = ['.jpg','.jpeg','.png','.bmp','.tif','.gif'];\nvar noteTemplate = \"<div class='inner'><a class='internal-link' href=''><div class='itemHeader'><div class='fileName'></div><div class='fileDate'></div></div><div class='itemContent'><div class='fileDescription'></div><div class='fileAttachments'></div></div></div></a></div>\";\nvar attachmentTemplate = \"<div class='file'><div class='fileExtension'></div></div>\"\n\n// Set Root Node\nconst rootNode = dv.el(\"div\", \"\", {cls: \"NotesList\", attr: {view: view}});\n\n// Loop Notes To Build ListView\nnotes.forEach(function(note) {\n\t\t\n\t\t// Get File Meta\n\t\tvar fileName = note.file.name;\n\t\tvar fileDate = moment(note.file.mtime.toString()).fromNow();\n\t\tvar filePath = app.vault.getAbstractFileByPath(note.file.path);\n\t\tvar filePathName = filePath.name;\n\t\tvar fileOutlinks = note.file.outlinks;\n\t\tvar fileAttachments = \"\";\n\t\tvar fileAttachmentsCounter = fileOutlinks.length;\n\t\n\t\t// Get Attachments\n\t\tif (fileOutlinks) {\n\t\t\tfileOutlinks.forEach(function(outlink) {\n\t\t\t\tvar outlinkPath = app.vault.getResourcePath(outlink);\n\t\t\t\tvar outlinkIsImage = false;\n\t\t\t\t\n\t\t\t\t// Set Image Attachments\n\t\t\t\timgExtensions.forEach(function(extension) {\n\t\t\t\t\tif (outlinkPath.toUpperCase().contains(extension.toUpperCase())) {\n\t\t\t\t\t\tfileAttachments += \"<img src='\" + outlinkPath + \"' />\";\n\t\t\t\t\t\toutlinkIsImage = true;\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// Set File Attachments\n\t\t\t\tif (!outlinkIsImage) {\n\t\t\t\t\tvar ext = outlinkPath.match(/\\.([0-9a-z]+)(?:[\\?#]|$)/i);\n\t\t\t\t\tif (ext) {\n\t\t\t\t\t\tfileAttachments += attachmentTemplate.replace(\"\", ext[1].toUpperCase());\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t});\n\t\t};\n\t\n\t\t// Optimize Description\n\t\tapp.vault.read(filePath).then(function(fileDescription) {\n\t\t\tfileDescription = fileDescription.substring(0,500);\n\t\t\tfileDescription = fileDescription.replace(/(\\!\\[\\[).*(\\]\\])/gm, \"\");\n\t\t\tfileDescription = fileDescription.replace(/(\\!\\[).*(\\])/gm, \"\");\n\t\t\tfileDescription = fileDescription.replace(/(\\[).*(\\]\\().*(\\))/gm, \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"---\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"*\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"|\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"![\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"[\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"]\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"#\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"##\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"###\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"####\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"#####\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"######\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"```\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\">\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"<\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"$=\", \"\");\n\t\t\tfileDescription = fileDescription.replaceAll(\"  \", \" \");\n\t\t\tfileDescription = fileDescription.replaceAll(/(\\r\\n|\\n|\\r)/gm, \" \"); // Remove Linebreaks\n\t\t\tfileDescription = fileDescription.replace(/^\\ /, \"\"); // Remove Leading Whitespace\n\t\t\tvar listViewItem = noteTemplate.replace(\"\",filePathName).replace(\"\",fileName).replace(\"\",fileDate).replace(\"\",fileDescription).replace(\"\",fileAttachments);\n\t\t\t\n\t\t\t// Append To Root Node\n\t\t\trootNode.querySelector(\"span\").appendChild(dv.el(\"div\", listViewItem, {cls: \"listViewItem\", attr: {outlinks: fileAttachmentsCounter}}));\n\t\t});\n});\n","count_time":{"symbolsCount":"3.6k","symbolsTime":"3 mins."},"toc":""}